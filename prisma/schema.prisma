generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  type     String
  products Product[]

  // createAt    DateTime @default(now())
  // updateAt    DateTime @updatedAt
  @@map("categories")
}

// Contains products infomration
model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  description String
  imageUrl    String
  name        String
  title       String
  price       Int
  priceKey    String
  CartItem    CartItem[]
  Stock       Stock[]

  categoryId String      @db.ObjectId
  category   Category    @relation(fields: [categoryId], references: [id])
  OrderItem  OrderItem[]

  // createAt    DateTime @default(now())
  // updateAt    DateTime @updatedAt
  @@map("products")
}

// Contains products stock information
model Stock {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  // createAt    DateTime @default(now())
  // updateAt    DateTime @updatedAt
  @@map("stocks")
}

// Contains cart information about user actual order
model Cart {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  cartPrice         Int        @default(0) // sum of all products in cart
  generatedOrderId  Int        @default(1000000) // unique order id (for user to track his order)
  items             CartItem[]
  wasOrderCompleted Boolean    @default(false) // if user completed the order (he creates order and fill all information about delivery and payment)
  wasOrderPaid      Boolean    @default(false) // if user paid for the order
  wasOrderDelivered Boolean    @default(false) // if user received the order
  User              User[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("carts")
}

// Contains one cart item from cart of actual user order
model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  // createAt    DateTime @default(now())
  // updateAt    DateTime @updatedAt
  @@map("cartitems")
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  firstname       String
  lastname        String
  email           String
  phone           Int
  cartId          String        @db.ObjectId
  cart            Cart          @relation(fields: [cartId], references: [id])
  paymentTypeId   String        @db.ObjectId
  paymentType     PaymentType   @relation(fields: [paymentTypeId], references: [id])
  transportInfoId String        @db.ObjectId
  transportInfo   TransportInfo @relation(fields: [transportInfoId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  order    Order    @relation(fields: [orderId], references: [id])
  orderId  String   @db.ObjectId

  @@map("users")
}

model TransportInfo {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  address         String
  city            String
  zip             Int
  transportType   TransportType @relation(fields: [transportTypeId], references: [id])
  transportTypeId String        @db.ObjectId
  User            User[]

  @@map("transportinfo")
}

model TransportType {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  numberId      Int
  name          String
  company       String
  price         Int
  TransportInfo TransportInfo[]

  // createAt DateTime @default(now())
  // updateAt DateTime @updatedAt
  @@map("transporttype")
}

model PaymentType {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  numberId       Int
  name           String
  company        String
  paymentGateway Boolean
  price          Int
  User           User[]

  // createAt    DateTime @default(now())
  // updateAt    DateTime @updatedAt
  @@map("paymenttype")
}

model Order {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  orderPrice        Int     @default(0) // sum of all products in cart
  generatedOrderId  Int     @default(1000000) // unique order id (for user to track his order)
  wasOrderCompleted Boolean @default(false) // if user completed the order (he creates order and fill all information about delivery and payment)
  wasOrderPaid      Boolean @default(false) // if user paid for the order
  wasOrderDelivered Boolean @default(false) // if user received the order

  items    OrderItem[]
  createAt DateTime    @default(now())
  updateAt DateTime    @updatedAt

  User User[]

  @@map("order")
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Int
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orderitem")
}
